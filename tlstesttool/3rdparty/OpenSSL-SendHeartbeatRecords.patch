--- a/include/openssl/ssl.h.in	2022-10-21 12:46:49.439457000 +0200
+++ b/include/openssl/ssl.h.in	2022-12-16 12:26:02.468888409 +0100
@@ -1516,6 +1516,7 @@
 void BIO_ssl_shutdown(BIO *ssl_bio);
 
 int SSL_CTX_set_overwrite_client_hello_ext(SSL_CTX * ctx, const char *ext, size_t ext_len, unsigned int message_ext);
+int SSL_CTX_set_handshake_type(SSL_CTX * ctx, int overwriteHandshakeType, int handshakeType);
 
 __owur int SSL_CTX_set_cipher_list(SSL_CTX *, const char *str);
 __owur SSL_CTX *SSL_CTX_new(const SSL_METHOD *meth);
--- a/ssl/record/ssl3_record.c	2021-12-14 17:16:25.000000000 +0100
+++ b/ssl/record/ssl3_record.c	2022-12-20 13:37:35.609100506 +0100
@@ -690,7 +690,8 @@
             thisrr->type = thisrr->data[end];
             if (thisrr->type != SSL3_RT_APPLICATION_DATA
                     && thisrr->type != SSL3_RT_ALERT
-                    && thisrr->type != SSL3_RT_HANDSHAKE) {
+                    && thisrr->type != SSL3_RT_HANDSHAKE
+                    && thisrr->type != SSL_get_SSL_CTX(s)->handshake_type) {
                 SSLfatal(s, SSL_AD_UNEXPECTED_MESSAGE, SSL_R_BAD_RECORD_TYPE);
                 goto end;
             }
--- a/ssl/s3_lib.c	2021-12-14 17:16:25.000000000 +0100
+++ b/ssl/s3_lib.c	2022-12-16 12:53:02.864849442 +0100
@@ -4433,10 +4433,17 @@
     if (s->s3.renegotiate)
         ssl3_renegotiate_check(s, 0);
 
-    return s->method->ssl_write_bytes(s, SSL3_RT_APPLICATION_DATA, buf, len,
+    int handshakeType = SSL3_RT_APPLICATION_DATA;
+    if(SSL_get_SSL_CTX(s)->overwrite_handshake_type){
+        handshakeType = SSL_get_SSL_CTX(s)->handshake_type;
+    }
+    //MARK Simon
+
+    return s->method->ssl_write_bytes(s, handshakeType, buf, len,
                                       written);
 }
 
+
 static int ssl3_read_internal(SSL *s, void *buf, size_t len, int peek,
                               size_t *readbytes)
 {
--- a/ssl/ssl_lib.c	2022-10-21 12:46:49.439457000 +0200
+++ b/ssl/ssl_lib.c	2022-12-16 14:56:38.907279140 +0100
@@ -2718,6 +2718,12 @@
    ctx->overwrite_message_ext= message_ext;
 }
 
+int SSL_CTX_set_handshake_type(SSL_CTX * ctx, int overwriteHandshakeType, int handshakeType){
+    ctx->overwrite_handshake_type = overwriteHandshakeType;
+    ctx->handshake_type = handshakeType;
+}
+
+
 
 /** specify the ciphers to be used by default by the SSL_CTX */
 int SSL_CTX_set_cipher_list(SSL_CTX *ctx, const char *str)
--- a/ssl/ssl_local.h	2022-10-21 12:46:49.439457000 +0200
+++ b/ssl/ssl_local.h	2022-12-16 12:53:02.872849442 +0100
@@ -881,6 +881,10 @@
     char* overwrite_client_hello_ext;
     size_t overwrite_client_hello_ext_len;
     unsigned int overwrite_message_ext;
+    //Mark Simon
+    int overwrite_handshake_type;
+    int handshake_type;
+
     const SSL_METHOD *method;
     STACK_OF(SSL_CIPHER) *cipher_list;
     /* same as above but sorted for lookup */
