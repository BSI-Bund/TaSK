--- a/include/openssl/ssl.h.in	2023-02-28 15:54:48.691114201 +0100
+++ b/include/openssl/ssl.h.in	2023-02-28 15:05:50.910685000 +0100
@@ -1519,6 +1519,7 @@
 
 int SSL_CTX_set_overwrite_client_hello_ext(SSL_CTX * ctx, const char *ext, size_t ext_len, unsigned int message_ext);
 int SSL_CTX_set_handshake_type(SSL_CTX * ctx, int overwriteHandshakeType, int handshakeType);
+int SSL_CTX_set_overwrite_hello_version(SSL_CTX * ctx, int overwriteHelloVersion, int version);
 
 __owur int SSL_CTX_set_cipher_list(SSL_CTX *, const char *str);
 __owur SSL_CTX *SSL_CTX_new(const SSL_METHOD *meth);
--- a/ssl/ssl_lib.c	2023-02-28 15:54:48.667126201 +0100
+++ b/ssl/ssl_lib.c	2023-02-28 15:05:50.838721000 +0100
@@ -2723,6 +2723,12 @@
     ctx->handshake_type = handshakeType;
 }
 
+int SSL_CTX_set_overwrite_hello_version(SSL_CTX * ctx, int overwriteHelloVersion, int version){
+    ctx->overwrite_hello_version = overwriteHelloVersion;
+    ctx->hello_version = version;
+}
+
+
 
 
 /** specify the ciphers to be used by default by the SSL_CTX */
--- a/ssl/ssl_local.h	2023-02-28 15:54:49.098910209 +0100
+++ b/ssl/ssl_local.h	2023-02-28 12:18:18.025453000 +0100
@@ -885,6 +885,10 @@
     int overwrite_handshake_type;
     int handshake_type;
 
+    int overwrite_hello_version;
+    int hello_version;
+
+
     const SSL_METHOD *method;
     STACK_OF(SSL_CIPHER) *cipher_list;
     /* same as above but sorted for lookup */
--- a/ssl/statem/statem_clnt.c	2021-12-14 17:16:25.000000000 +0100
+++ b/ssl/statem/statem_clnt.c	2023-02-28 12:27:45.431626000 +0100
@@ -1177,7 +1177,13 @@
      * For TLS 1.3 we always set the ClientHello version to 1.2 and rely on the
      * supported_versions extension for the real supported versions.
      */
-    if (!WPACKET_put_bytes_u16(pkt, s->client_version)
+    int version = s->client_version;
+
+    if(SSL_get_SSL_CTX(s)->overwrite_hello_version){
+        version = SSL_get_SSL_CTX(s)->hello_version;
+    }
+
+    if (!WPACKET_put_bytes_u16(pkt, version)
             || !WPACKET_memcpy(pkt, s->s3.client_random, SSL3_RANDOM_SIZE)) {
         SSLfatal(s, SSL_AD_INTERNAL_ERROR, ERR_R_INTERNAL_ERROR);
         return 0;
--- a/ssl/statem/statem_srvr.c	2021-12-14 17:16:25.000000000 +0100
+++ b/ssl/statem/statem_srvr.c	2023-02-28 12:18:36.540192000 +0100
@@ -2307,6 +2307,11 @@
     int usetls13 = SSL_IS_TLS13(s) || s->hello_retry_request == SSL_HRR_PENDING;
 
     version = usetls13 ? TLS1_2_VERSION : s->version;
+
+    if(SSL_get_SSL_CTX(s)->overwrite_hello_version){
+        version = SSL_get_SSL_CTX(s)->hello_version;
+    }
+
     if (!WPACKET_put_bytes_u16(pkt, version)
                /*
                 * Random stuff. Filling of the server_random takes place in
